use the ubuntu linux machine for practice

Demo1 :Print hello world
root@ip-172-31-23-135:~# echo "hello world"
hello world


Demo 2 : read & print name
root@ip-172-31-23-135:~# read name
sasi
root@ip-172-31-23-135:~# echo "$name"
sasi

Demo 3: customized string 
root@ip-172-31-23-135:~# read -p "pick a number :" x
pick a number :5
root@ip-172-31-23-135:~# echo "$x"
5

Demo 4: cat command
cat: names.txt: No such file or directory
root@ip-172-31-23-135:~# touch names.txt
root@ip-172-31-23-135:~# vi names.txt
root@ip-172-31-23-135:~# cat names.txt
john
jimmy
rose
dolly
root@ip-172-31-23-135:~# echo "sasi">names.txt  [ over writes]
root@ip-172-31-23-135:~# cat names.txt
sasi
root@ip-172-31-23-135:~# echo "john">>names.txt [ append it]
root@ip-172-31-23-135:~# cat names.txt
sasi
john

ubuntu terminal nano myscript.sh

#!/bin/bash

clear
echo "Hello"
read -p " please enter ur name:" name
echo "$name" >>names.txt

To run the script
root@ip-172-31-23-135:~# chmod +x myscript.sh
root@ip-172-31-23-135:~# ./myscript.sh
hello


Demo 4: to print nos
#!/bin/bash

for i in 1 2 3 4 5
do
echo "$i"
done

output:
root@ip-172-31-23-135:~# chmod +x myscript2.sh
root@ip-172-31-23-135:~# ./myscript2.sh
1
2
3
4
5


Basics of shell Scripting
Shell Scripting Basics
#############################################################
What is Script?
Script : list of commands intrepreted by a scripting language.
commands can be entered interactively or listed in a text file
SL are intrepreted at runtime
Scripting is slower to run, but faster to develop


What is scripts used for?
Widely used to automate processes
ETL Jobs, file backups and archiving, system admin
used for application integration, plug-in development, web apps, many other tasks

Shell Scripting and the 'Shebang'
Shell script  - executable text file with an interpreter directive  Aka 'Shebang' directive
#!intrepreter [ optional -arg]

intrepreter  - path to an executable program
optional-org - single argument string

Example - 'Shebang'  directives

Shell script directives:
#!/bin/sh 
#!/bin/bash


Python script directive
#!/usr/bin/env python3

Hello World example in Shell scripting
touch hello_world.sh 
echo '#! /bin/bash' >>hello_world.sh
echo 'echo hello_world'>>hello_world.sh

Make it executable
$ ls -l  hello_world.sh
chmod +x hello_world.sh
ls-l hello_world.sh

Run your bash script:
$ ./hello_world.sh


Lab Exercise
###########################################
After completing this lab you will be able to:

Create and execute a simple bash shell script.
Implement the 'shabang' directive in a bash shell script.

Exercise 1 - Create and execute a basic Shell Script
In this exercise, we will create a simple script which will do the following.

Accept a user name
Print a welcome message to the user
We will also add comments to the script. All the lines starting with # are comments.
 They are not executed by the shell.
 Comments make a shell script more readable, and help in debugging the script.

1.1. Create a new script file
Step 1: On the VS code  menu on the lab screen, use File->New File->save the file as
greet.sh.

Type the below code in editor [Visual Studio Code Editor]
# this script accepts the user name and print a message to user

# Print the prompt message on screen
echo -n "Enter your name:"

# wait for the user to enter a name , save the entered name int to 
# variable  'name'
read name

#print the welcome message followed by name
echo "welcome  $name"

# the following statement should print on a single line
# hence using of '-n'
echo -n "Congratulation you have successfully created and ran your script"


To run the program
---------------------------
Go to terminal tab ->New terminal ->
Run the commands below on the newly opened terminal.

Let us check the permissions for this new file:

ls -l greet.sh
If the file exists and has read permission, run the following command to execute it.

bash greet.sh

Exercise 2 - Using 'Shabang' line
======================================================================================
In this exercise, we will edit the script 'greet.sh' created in the previous exercise and make it an executable file.

This is done to ensure that the name of the script can be used like a command.

Adding this special line lets us specify the path to the interpreter of the script, which is 'bash' in this case.

Let us follow the below steps.

2.1 : Find the path to the interpreter.

The which command helps you find out the path of the command 'bash'.

which bash
In this case it returns the path '/bin/bash'.

2.2 : Edit the script 'greet.sh' and add the shabang line to the script.

Open the file and add the following line at the beginning of the script:

#! /bin/bash
2.3 Check the permissions of the script.

One more step needs to be completed to make 'greet.sh' completely executable by name.
Let us add the execute permission for the user on greet.sh.

chmod +x greet.sh
Verify if the execute permission is granted.

Generally, it is not a good idea to grant permissions to a script for all user, groups and others alike. It is more appropriate to limit the execute permission to only the owner.

To change permissions for greet.sh, run the command below:

chmod u+x greet.sh
Verify the permissions using the command below.

ls -l greet.sh
If you wish to grant execute permission to everyone you need to run the command chmod +x greet.sh

2.4 Execute the script.

Run the command given below to execute the shell script.

./greet.sh
The '.' here refers to the current directory. 
We are telling linux to execute the script greet.sh that is in the current directory.

FILTERS PIPES AND VARIABLES
####################################################################
Filters are shell commands,which:
-> Takes input from standard input
-> Send output to standard output
-> Tranforms input data in to output
-> Examples wc, cat ,more,head, sort,..
Filters can be chained together

Pipe command  - |
For chaing filter commands  command1|command2
output of command 1 is input of command 2
pipe stands for pipeline

eg: ls|sort-r
output
$ ls | sort -r [ sort the directory in order]

shell varibles
Scope limited to shell

Set - list all shell variables
eg: set | head -4 
output:
$ set | head -4 
ALLUSERSPROFILE='C:\ProgramData'
APPDATA='C:\Users\psasirek\AppData\Roaming'
BASH=/usr/bin/bash
BASHOPTS=cmdhist:complete_fullquote:expand_aliases:extquote:force_fignore:hostcomplete:interactive_comments:progcomp:promptvars:sourcepath

Define shell variables:
var_name=value
eg:
Greeting="Hello"
echo $Greeting

Environment variables
Extended scope
export var_name
env - list all environment varibles
eg:export  Greetings
env|grep "Gree"

      
Hands-on Lab: Bash Scripting Advanced
#########################################################
Estimated time needed: 30 minutes

Objectives
After completing this lab you will be able to make use of the following features of the bash shell

Metacharacters
Quoting
Variables
Command substitution
I/O Redirection
Pipes and Filters
Command line arguments


1.1 '#' - For adding comments
Lines beginning with a # (with the exception of #!) are comments and will not be executed.
# This is a comment line

1.2 ';' - Command seperator
Multiple commands can be seperated from each other using a ; when used in a single command line.
pwd;date

1.3 * - wildcard used in filename expansion
The '*' character matches any number of any character in filename patterns. By itself, it matches every filename in a given directory.
The following example lists all files whose name ends with a '.conf' in the /etc directory.
ls /etc/*.conf

1.4 '?' - wildcard used in filename expansion
The '?' character represents a single character in a filename pattern.
The following command lists all files whose name starts with any single character followed by 'grep'.
ls /bin/?grep


     
Exercise 2 - Quoting
If any special character has to be treated without their special meaning, we need to quote them.

The following examples show how quoting is done in shell.

2.1 Quoting using backslash (\)
Backslash removes the meaning of the special character that follows it.
echo The symbol for multiplicaton is \*

output:
$ echo The symbol for multiplicaton is \*
The symbol for multiplicaton is *

2.2 Quoting using single quote (')
A pair of single quotes removes special meanings of all special characters within them (except another single quote).
echo 'Following are some special characters in shell - < > ; " ( ) \ [ ]  '

2.3 Quoting using double quote (")

A pair of double quotes removes special meanings of all special characters within them except another double quote, variable substitution and command substitution..
Try out the examples below with double quotes as well as single quotes to see the difference between their usage.
echo "Current user name: $USERNAME"

o/p: $ echo "Current user name: $USERNAME"
Current user name: ravi



Exercise 3 - Working with variables
#############################################################################
About Variables

Variables help store data for the script. The data may be in the form of a number or a character string.

You may create, remove or display the variables.
Let us now see how they are used in the shell.
3.1 List the variables already defined in the shell.
set
You should see a lot of variables in the output.

3.2 Create new variables
Use the syntax variable_name=value.
Create a new variable called 'balance' with a value of 10000. List all the variables again.
balance=10000
Run the set command to check if the variable balance has been created.
set

3.3 Create an environment variable

Environment variables are just like any other variable. They differ in the fact that they are copied to any child process created from the shell.

export command can be used to convert a regular variable to environment variable.

Make the variable ' balance' an environment variable.

export balance
3.4 List environment variables
~~~~~~~~~~~~~~~~~~~~~~~~

Use the following command to list all the environment variables.

env
You should see a lot of variables in the output.

3.5 Display the value of a variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~
To display or interpolate the value of a variable in a command, we use the feature of shell called variable substitution.
It is done by preceding the name of the variable with a $ (dollar) symbol.
The command below prints the value of the variable $balance.
echo "Current account blance is $balance"

3.6 Remove a variable
~~~~~~~~~~~~~~~~~~~
To remove variables, use unset command.

Remove variable 'balance'.

unset balance
Run the set command to check if the variable balance has been removed.
set



Exercise 4 - Command substitution
##################################################################################
Command substitution is a feature of the shell, which helps save the output generated by a command in a variable.

It can also be used to nest multiple commands , so that the innermost command's output can be used by outer commands.
The inner command is enclosed in $() and will execute first.

Let us try the following examples.

4.1 Store the output of the command hostname -i in a variable named $myip
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

myip=$(hostname -i)
echo $myip

4.2 Print the following message on screen:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Running on host : host_name" ,
Where 'host_name' should be your current hostname.
echo "Running on host: $(hostname)"
Command substitution can be done using the backquote syntax also.

ls -l `which cat`
The output of command which cat is the path to the command cat. This path is sent to ls -l as an input. You should see the permissions for the file cat in the output.



Exercise 5 - I/O Redirection
####################################################################################
Linux sends the output of a command to standard output (display) and any error generated is sent to standard error (display).

Similarly, the input required by a command is received from standard input (keyboard).

If we need to change these defaults, shell provides a feature called I/O Redirection.

This is achieved using the following special characters.

Symbol	Meaning
<	Input Redirection
>	Output Redirecton
>>	Append Output
2>	Error Redirection
Let us try a few examples.

5.1 Save the network configuration details into a file called output.txt
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example, we will send the output of ifconfig command to the file instead of standard output(display).

ifconfig > output.txt
Check out the contents of output.txt

cat output.txt

5.2 Save the output of date command into the file 'output.txt'.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

date > output.txt
Check out the contents of output.txt

cat output.txt
Did you notice, that previous contents of output.txt were overwritten?

When you redirect using > the contents of the target file are overwritten.

5.3 Append output to a file
~~~~~~~~~~~~~~~~~~~~~~

Now, we will try the following sequence, where we use '>>' instead of '>'.

Run the commands below.

uname -a >> newoutput.txt
date >> newoutput.txt
Check out the contents of newoutput.txt

cat newoutput.txt
You should see the output of uname and date commands appended to the file newoutput.txt

5.4 Dipslay the contents of file 'newoutput.txt' in all uppercase.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
You can use the command tr for this translation.

tr command does not accept file names as arguments. But it accepts standard input.

So, we will redirect the content of file 'newoutput.txt' to the input of tr command.

tr "[a-z]" "[A-Z]" < newoutput.txt
You should see all capital letters in the output.



Exercise 6 - Pipes and Filters
#####################################################################################
Command pipeline is a feature of the shell, that helps us to combine different unrelated commands in such a way that one command's output is sent directly as input to the next command. This way, what is not possible with a single command can be made possible by connecting multiple commands.

Only filter commands can be used in this manner.

A filter command is a command which can accept input from standard input and send output to standard output.

Let us see some examples using few filter commands which we have already discussed.

6.1 Count the total number of files in your current directory.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Since the ls command doesn't provide an option to get a count, let us get help from wc command.

By combining them using command pipeline syntax, we get the following command.

ls | wc -l 
6.2 Find the total disk space usage.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

df -h command gives disk usage for all individual filesystems including the total usage across the server under the head overlay.

You can get the overall disk usage if you grep for overlay from the output of df -h
df -h|grep overlay

6.3 List five largest files.
~~~~~~~~~~~~~~~~~~~

The -S option of ls command sorts the files from largest to smallest.

We will send this sorted list through a pipe to the head command.

ls -lS /bin | head -6
You should see the list of five largest files from the /bin directory.



Exercise 7 - Command line arguments
#############################################################################
Command line arguments are a very convenient way to pass inputs to a script.
Command line arguments can be accessed inside the script as $1, $2 and so on. $1 is the first arugment, $2 is the second argument.

7.1 Create a simple bash script that handles two arguments.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Save the below code as wish.sh

#! /bin/bash

echo "Hi $1 $2"

#$1 is the first argument passed to the script

echo "$1 is your firstname"

#$2 is the second argument passed to the script
echo "$2 is your lastname"
Make the script executable to everyone.

chmod +x wish.sh
Run the script with the two arguments as shown below.

./wish.sh Ramesh Sannareddy
You should see the below output.

Hi Ramesh Sannareddy

Ramesh is your firstname

Sannareddy is your lastname

7.2 Find the total disk space usage.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Let us create a bash script named dirinfo.sh that takes the directory name as an argument and prints the total number of the the directories and the number of files in it.

We will make use of the find command with -type option which will list only files or directories depending upon the usage of d switch or f switch respectively.

The command wc -l will count the lines.

Save the below code as dirinfo.sh

#! /bin/bash

dircount=$(find $1 -type d|wc -l)

filecount=$(find $1 -type f|wc -l)

echo "There are $dircount directories in the directory $1"

echo "There are $filecount files in the directory $1"
Make the script executable to everyone.

chmod +x dirinfo.sh
Run the script with the one argument as shown below.

./dirinfo.sh /tmp
In the output you should see number of files and directories in the directory /tmp.



Hands-on Lab: Scheduling Jobs using crontab
####################################################################
Estimated time needed: 20 minutes

Objectives
After completing this lab you will be able to:

List existing cron jobs.
Add a cron job.
Remove cron jobs.

Exercise 1 - Understand crontab file syntax
Cron is a system daemon used to execute desired tasks in the background at designated times.

A crontab file is a simple text file containing a list of commands meant to be run at specified times. It is edited using the crontab command.

Each line in crontab file has five time-and-date fields, followed by a command, followed by a newline character ('\n'). The fields are separated by spaces.

The five time-and-date fields cannot contain spaces. The five time-and-date fields and their allowed values are as follows:

minute (0-59)
hour(0-23, 0 = midnight)
day (1-31)
month (1-12)
weekday (0-6, 0 = Sunday)

      
 Step 4 of 7 
cognitiveclass.ai logo
Exercise 2 - List cron jobs
Open a new terminal, by clicking on the menu bar and selecting Terminal->New Terminal, 
      
 Step 4 of 7 
cognitiveclass.ai logo
Exercise 2 - List cron jobs
Open a new terminal, by clicking on the menu bar and selecting Terminal->New Terminal, 
You may get a message no crontab for theia if your crontab is empty.

Exercise 3 - Add a job in the crontab file
3.1. Add a job to crontab.

To add a cron job, run the command below

crontab -e
This will create a new crontab file for you(if you do not have one already) and now you are ready to add a new cron job.

Add the below line at the end of the crontab file.

0 21 * * * echo "Welcome to cron" >> /tmp/echo.txt
The above job specifies that the echo command should run when the minute is 0 and the hours is 21. It effectively means the job runs at 9.00 p.m every day.

The output of the command should be sent to a file /tmp/echo.txt.
Press Control + X to save the changes.
Press 'Y' to confirm.

Press Enter to come out of the editor.
Check if the job is added to the crontab by running the following command.
crontab -l

3.2. Schedule a shell script.
Let us create a simple shell script that prints the current time and the current disk usage statistics.
Step 1: On the menu on the lab screen, use File->New File to create a new file:
Step 2: Give the file name as 'diskusage.sh' and click 'OK'
Step 3: Save the following commands into the shell script.

#! /bin/bash
# print the current date time
date
# print the disk free statistics
df -h

Step 4: Save the file using the File->Save menu option.

Step 5: Verify that the script is working:

chmod u+x diskusage.sh
./diskusage.sh

The script should print the current timestamp and the disk usage stats.
Let us schedule this script to be run everyday at midnight 12:00 (when the hour is 0 on the 24 hour clock). We want the output of this script to be appended to /home/project/diskusage.log.
Edit the crontab.
crontab -e

Add the following line to the end of the file:
0 0 * * * /home/project/disksusage.sh >>/home/project/diskusage.log

Press Control + X to save the changes.
Press 'Y' to confirm.
Press Enter to come out of the editor.
Check if the job is added to the crontab by running the following command.
crontab -l
You should see the newly added job in the output.



Exercise 4 - Remove the current crontab
The -r option causes the current crontab to be removed.

Caution: This removes all your cron jobs. Be extra cautious when you use this command on a production server.
crontab -r
Verify if your crontab is removed.
crontab -l

Home work: Create a cron job that runs the task date >> /tmp/everymin.txt every minute.


REFERECNCES :Linux Commands & Shell Scripting Basics from edx.
